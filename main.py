# import requests.exceptions
import telebot
from telebot import types
from dotenv import load_dotenv
import os
import sqlite3
import random
import string
import datetime
import calendar

# –∑–∞–≥—Ä—É–∂–∞–µ–º TOKEN –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

# –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
ACTIVE_CLASS = ''
# –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ id —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
SHEDULE_ID = 0

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å TeleBot
bot = telebot.TeleBot(TOKEN)


# –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–º–∏ –∑–∞ —Ä–∞–±–æ—Ç—É —Å –ë–î
class SQLighter:
    global ACTIVE_CLASS, SHEDULE_ID

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    def __init__(self, user_id):
        self.database = 'db.db'
        self.con = sqlite3.connect(self.database)
        self.cursor = self.con.cursor()
        self.user_id = user_id

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ë–î
    def add_class(self, key, name):
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
        result_of_execute = self.cursor.execute(f'SELECT * FROM classes WHERE key = {key}').fetchall()
        if result_of_execute:
            return False
        # –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
        sqlite_insert_query = f"""INSERT INTO classes (key, name)  VALUES  ({key}, '{name}')"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    # –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    def add_admin(self, key):
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        result_of_execute = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                                f' = {key}').fetchall()
        if not result_of_execute:
            return False
        # –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–¥–º–∏–Ω–µ
        sqlite_insert_query = f"""INSERT INTO admins (class_id, admin)  VALUES
          ({result_of_execute[0][0]}, {self.user_id})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    # –¥–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å
    def add_user_to_class(self, key):
        # –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π id –∫–ª–∞—Å—Å–∞
        class_id = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                       f' = {key}').fetchall()
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É—á–µ–Ω–∏–∫ –≤ –∫–ª–∞—Å—Å–µ
        if_user_in_class = self.cursor.execute(f'SELECT * FROM users_in_classes WHERE user_id'
                                               f' = {self.user_id} AND class_id = {class_id[0][0]}').fetchall()

        if not class_id or if_user_in_class:
            return
        else:
            # –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–µ
            sqlite_insert_query = f"""INSERT INTO users_in_classes (user_id, class_id)  VALUES
                              ({self.user_id}, {class_id[0][0]})"""
            self.cursor.execute(sqlite_insert_query)
            self.con.commit()

    # –ø–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞
    def search_class(self, key):
        # –ø–æ–ª—É—á–∞–Ω–∏–µ –∏–∑ –ë–î –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
        result_of_execute = self.cursor.execute(f'SELECT name FROM classes WHERE key'
                                                f' = {key}').fetchall()
        return result_of_execute[0][0] if result_of_execute else False

    # –ø–æ–∏—Å–∫ id –≤ –∫–ª–∞—Å—Å–µ
    def search_id_class(self, key):
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î id
        result_of_execute = self.cursor.execute(f'SELECT id FROM classes WHERE key'
                                                f' = {key}').fetchall()
        return result_of_execute[0][0] if result_of_execute else False

    # –ø–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ
    def search_user_classes(self):
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–µ–Ω–∏–∫–∞—Ö
        result_of_execute = self.cursor.execute(f'SELECT name, key FROM classes INNER JOIN users_in_classes'
                                                f' ON id = class_id WHERE user_id = {self.user_id}').fetchall()
        return result_of_execute if result_of_execute else False

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–ª–∞—Å—Å–µ
    def user_is_admin(self, key):
        # —Å–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–µ
        result_of_execute = self.cursor.execute(f'SELECT * FROM admins INNER JOIN classes'
                                                f' ON class_id = id WHERE admin = {self.user_id}'
                                                f' AND key = {key}').fetchall()
        return True if result_of_execute else False

    # –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ
    def search_users_in_class(self, key):
        # —Å–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–∞—Ö
        result_of_execute = self.cursor.execute(
            f'SELECT user_id FROM users_in_classes WHERE class_id ='
            f' (SELECT id FROM classes WHERE key = {key})').fetchall()
        return result_of_execute if result_of_execute else False

    def add_shedule(self, key):
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        class_id = self.search_id_class(key)
        sqlite_insert_query = f"""INSERT INTO shedule (class_id) VALUES ({class_id})"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def add_shedule_on_day(self, day, text):
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
        class_id = self.search_id_class(ACTIVE_CLASS)
        sqlite_insert_query = f"""UPDATE shedule SET {day} = '{text}' WHERE class_id = {class_id}"""
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def search_shedule(self, key):
        # –∏—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        result_of_execute = self.cursor.execute(f'SELECT * FROM shedule'
                                                f' WHERE class_id = (SELECT id FROM'
                                                f' classes WHERE key = {key})').fetchall()
        return result_of_execute if result_of_execute else False

    def search_shedule_for_day(self, shedule_id, day):
        # –∏—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
        result_of_execute = self.cursor.execute(f'SELECT {day} FROM shedule WHERE '
                                                f'id = {shedule_id}').fetchall()
        return result_of_execute if result_of_execute else False

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    def create_new_homework(self, key, date, homeworks):
        class_id = self.search_id_class(ACTIVE_CLASS)
        # –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î –æ –∫–ª–∞—Å—Å–µ, –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –∏ –µ–≥–æ –¥–∞—Ç–µ
        sqlite_insert_query = f"""INSERT INTO homework (id, date, homework, class_id) VALUES  ({key}, {date}, '{homeworks}', {class_id}) """
        self.cursor.execute(sqlite_insert_query)
        self.con.commit()

    def search_homework_on_date(self, date):
        class_id = self.search_id_class(ACTIVE_CLASS)
        result_of_execute = self.cursor.execute(f'SELECT homework FROM homework WHERE '
                                                f'class_id = {class_id} AND date = {date}').fetchall()
        return result_of_execute if result_of_execute else False


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è user –∏ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è —Å –Ω–∏–º
    user_first_name = str(message.chat.first_name)
    # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å –Ω—É–∂–Ω—ã–º–∏ –¥–ª—è –Ω–∞—Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = ['üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å', 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å', '‚ùì–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏', 'üéì–í–∞—à–∏ –∫–ª–∞—Å—Å—ã',
               'üÜî–ü–æ–ª—É—á–∏—Ç—å id']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    for button in buttons:
        markup.add(button)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É /start
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Asenshik_bot,'
                                      f' –ø–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ —Å–Ω–∏–∑—Éüëá.', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def buttons(message):
    global ACTIVE_CLASS, SHEDULE_ID
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    sqlighter = SQLighter(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –í—ã–∑–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞, –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    # –ë–æ—Ç –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º bot.send_message,
    # –õ–∏–±–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏,
    # –õ–∏–±–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–π,
    # –±–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ—Ç–æ–¥–æ–º bot.register_next_step_handler
    if message.text == '‚ùì–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        bot.send_message(message.chat.id, text='–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è,'
                                               ' –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @asenshik.', reply_markup=markup)
    elif message.text == 'üë®‚Äçüéì–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∞—Å—Å–∞(6-–∑–Ω–∞—á–Ω—ã–π –∫–ª—é—á –∏–∑ —Ü–∏—Ñ—Ä):',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, search_class)
    elif message.text == 'üë©‚Äçüè´–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å':
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:', reply_markup=markup)
        bot.register_next_step_handler(sent, create_class)
    elif message.text == 'üéì–í–∞—à–∏ –∫–ª–∞—Å—Å—ã':
        list_of_classes(message)
    elif message.text == 'üìí–î–ó':
        homework(message)
    elif message.text == '‚úç–î–æ–±–∞–≤–∏—Ç—å –î–ó':
        add_homework(message)
    elif message.text == 'üìñ–£–∑–Ω–∞—Ç—å –î–ó':
        search_homework(message)
    elif message.text == 'üìì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        shedule(message)
    elif message.text == 'üö´–ù–∞–∑–∞–¥':
        search_class(message, ACTIVE_CLASS)
    elif message.text == '‚ùå–ù–∞–∑–∞–¥':
        shedule(message)
    elif message.text == 'üî¥–ù–∞–∑–∞–¥':
        homework(message)
    elif message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        start_message(message)
    elif message.text == 'üÜî–ü–æ–ª—É—á–∏—Ç—å id':
        bot.send_message(message.chat.id, f'–í–∞—à id: {message.chat.id}')
    elif message.text == 'üîë–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á':
        send_class_id(message)
    elif message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings(message)
    elif message.text == 'üìñ–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∞–¥–º–∏–Ω —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not sqlighter.search_shedule(ACTIVE_CLASS):
            sqlighter.add_shedule(ACTIVE_CLASS)
            buttons = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                       '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            markup.add(*buttons)
            sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
            bot.register_next_step_handler(sent, add_shedule)
        else:
            bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')
    elif message.text == '‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        shedule(message)
    elif '/' in message.text and len(message.text.split('/')[-1]) == 6:
        key = message.text.split('/')[-1]
        search_class(message, key)
    else:
        bot.send_message(message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüò•.')


# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∞
def back(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–Ω–æ–ø–æ–∫
    buttons = ['üìì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
               'üìí–î–ó',
               '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω
    markup.add(*buttons)
    bot.send_message(message.chat.id, text='üëÄ–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=markup)


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ –≤—ã–∑–æ–≤—É –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
def create_class(message):
    global ACTIVE_CLASS
    try:
        # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
            return start_message(message)
        elif message.text == '/start':
            return start_message(message)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        creating_key = True
        # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
        key = ''
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞
        while creating_key:
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–ª—é—á
            key = ''.join(random.choice(string.digits) for _ in range(6))
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
            if key[0] != '0':
                if not sqlighter.add_class(key, message.text):
                    creating_key = False
        # –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ACTIVE_CLASS –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
        ACTIVE_CLASS = key
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –∫–ª–∞—Å—Å –ø–æ –µ–≥–æ –∫–ª—é—á—É
        sqlighter.add_admin(key)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞—Å—Å –ø–æ –µ–≥–æ –∫–ª—é—á—É
        sqlighter.add_user_to_class(key)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–Ω–æ–ø–æ–∫
        buttons = ['üìì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                   'üìí–î–ó',
                   '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω
        markup.add(*buttons)
        bot.send_message(message.chat.id, f'–ö–ª–∞—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∫–ª—é—á:\n{key}',
                         reply_markup=markup)
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å.')


# –ø–æ–∏—Å–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏
def search_class(message, key=None):
    global ACTIVE_CLASS
    # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        return start_message(message)
    try:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
        if key:
            key = key
        else:
            # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∫–ª—é—á—É—é –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            key = message.text
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlither = SQLighter(message.from_user.id)
        # –ø–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ –ø–æ –∫–ª—é—á—É –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        name = sqlither.search_class(key)
        # –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤—ã–≤–æ–¥ Exception
        if not name:
            raise Exception
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if sqlither.user_is_admin(key):
            # –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            sqlither.add_user_to_class(key)
            ACTIVE_CLASS = key
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–Ω–æ–ø–æ–∫
            buttons = ['üìì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                       'üìí–î–ó',
                       '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω
            markup.add(*buttons)
            bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ "{name}"',
                             reply_markup=markup)
        else:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—á–µ–Ω–∏–∫–∞
            sqlither.add_user_to_class(key)
            ACTIVE_CLASS = key
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–Ω–æ–ø–æ–∫
            buttons = ['üìì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìí–î–ó', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω
            markup.add(*buttons)
            bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ "{name}".',
                             reply_markup=markup)
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å.')


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def settings(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        buttons = ['üë®üèª‚Äçüè´–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'üîë–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'üö´–ù–∞–∑–∞–¥', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
        # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        markup.add(*buttons)
        bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', reply_markup=markup)
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')


def send_class_id(mesage):
    try:
        bot.send_message(mesage.chat.id, f'–ö–ª—é—á –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ - {ACTIVE_CLASS}')
        return settings(mesage)
    except Exception:
        bot.send_message(mesage.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.')
        return settings(mesage)


# –≤—ã–≤–æ–¥ –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def list_of_classes(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    try:
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∞—Å—Å–µ
        classes = sqlighter.search_user_classes()
        if not classes:
            # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            raise Exception
        else:
            # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏ –∫–ª–∞—Å—Å—ã
            klass = []
            # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –∫–ª–∞—Å—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            class_to_send = []
            # –ø–µ—Ä–µ–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
            for clas in classes:
                klass.append(f'{clas[0]}/{clas[1]}')
                class_to_send.append(f'{clas[0]}')
            markup.add(*klass)
            markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
            bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞—Å—Å–∞—Ö: {", ".join(class_to_send)}.',
                             reply_markup=markup)
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–µ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ.',
                         reply_markup=markup)


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def shedule(message):
    global ACTIVE_CLASS, SHEDULE_ID
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        sqlighter = SQLighter(message.from_user.id)
        # –∏—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        shedule = sqlighter.search_shedule(ACTIVE_CLASS)
        # –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π
        if shedule:
            buttons = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                       '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', 'üö´–ù–∞–∑–∞–¥', '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é']
            if sqlighter.user_is_admin(ACTIVE_CLASS):
                markup.add('‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            markup.add(*buttons)
            # –¥–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
            SHEDULE_ID = shedule[0][0]
            bot.register_next_step_handler(sent, send_shedule)
        else:
            # –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            buttons1 = ['üìñ–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üö´–ù–∞–∑–∞–¥']
            markup.add(*buttons1)
            # –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
                             reply_markup=markup)
    except Exception as e:
        print(e)
        # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def send_shedule(message):
    global ACTIVE_CLASS, SHEDULE_ID
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–∫–æ–π –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏—Ç—å
    if message.text == '‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        buttons = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                   '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', 'üö´–ù–∞–∑–∞–¥']
        markup.add(*buttons)
        markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
        sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
        return bot.register_next_step_handler(sent, add_shedule)
    if message.text == 'üö´–ù–∞–∑–∞–¥':
        return search_class(message, ACTIVE_CLASS)
    elif message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        return start_message(message)
    markup.add('‚ùå–ù–∞–∑–∞–¥')
    markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
    sqlighter = SQLighter(message.from_user.id)
    # –≤—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏
    if message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'monday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            # –≤—ã–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–í—Ç–æ—Ä–Ω–∏–∫':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'tuesday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            # –≤—ã–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–°—Ä–µ–¥–∞':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'wednesday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            # –≤—ã–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–ß–µ—Ç–≤–µ—Ä–≥':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'thursday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            # –≤—ã–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–ü—è—Ç–Ω–∏—Ü–∞':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'friday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            # –≤—ã–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    elif message.text == '–°—É–±–±–æ—Ç–∞':
        day = sqlighter.search_shedule_for_day(SHEDULE_ID, 'saturday')
        if day[0][0] is None:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
                                              ' –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚úçüèª–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".',
                             reply_markup=markup)
        else:
            # –≤—ã–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            diary, digit = '', 1
            for subject in day[0][0].split():
                sub = diary
                diary = sub + '\n' + str(digit) + '. ' + subject
                digit += 1
            bot.send_message(message.chat.id, diary, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
def add_shedule(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚ùå–ù–∞–∑–∞–¥')
    markup.add('‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é')
    # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if message.text == '‚úÖ–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω—É—é':
        start_message(message)
    # –≤ —Å–ª—É—á–∞–µ –Ω–µ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–æ–≤
    elif message.text == '‚ùå–ù–∞–∑–∞–¥':
        return back(message)
    # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    elif message.text == 'üö´–ù–∞–∑–∞–¥':
        return shedule(message)
    # –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é
    # –∫–∞–∂–¥–æ–º—É —É—á–µ–±–Ω–æ–º—É –¥–Ω—é. –î–∞–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    elif message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_monday)
    elif message.text == '–í—Ç–æ—Ä–Ω–∏–∫':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_tuesday)
    elif message.text == '–°—Ä–µ–¥–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_wednesday)
    elif message.text == '–ß–µ—Ç–≤–µ—Ä–≥':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_thursday)
    elif message.text == '–ü—è—Ç–Ω–∏—Ü–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_friday)
    elif message.text == '–°—É–±–±–æ—Ç–∞':
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=markup)
        bot.register_next_step_handler(sent, add_shedule_on_saturday)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
def add_shedule_on_monday(message):
    try:
        # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if message.text == '‚ùå–ù–∞–∑–∞–¥':
            return shedule(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlighter.add_shedule_on_day('monday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫
def add_shedule_on_tuesday(message):
    try:
        # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if message.text == '‚ùå–ù–∞–∑–∞–¥':
            return shedule(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlighter.add_shedule_on_day('tuesday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å—Ä–µ–¥—É
def add_shedule_on_wednesday(message):
    try:
        # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if message.text == '‚ùå–ù–∞–∑–∞–¥':
            return shedule(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î –Ω–∞ —Å—Ä–µ–¥—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlighter.add_shedule_on_day('wednesday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥
def add_shedule_on_thursday(message):
    try:
        # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if message.text == '‚ùå–ù–∞–∑–∞–¥':
            return shedule(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlighter.add_shedule_on_day('thursday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É
def add_shedule_on_friday(message):
    try:
        # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if message.text == '‚ùå–ù–∞–∑–∞–¥':
            return shedule(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlighter.add_shedule_on_day('friday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å—É–±–±–æ—Ç—É
def add_shedule_on_saturday(message):
    try:
        # –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if message.text == '‚ùå–ù–∞–∑–∞–¥':
            return shedule(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î –Ω–∞ —Å—É–±–±–æ—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlighter.add_shedule_on_day('saturday', message.text)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.')
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')


# —Ä–∞–±–æ—Ç–∞ —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
def homework(message):
    global ACTIVE_CLASS
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–Ω–æ–ø–æ–∫
    buttons = ['‚úç–î–æ–±–∞–≤–∏—Ç—å –î–ó', 'üìñ–£–∑–Ω–∞—Ç—å –î–ó', 'üö´–ù–∞–∑–∞–¥']
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
    markup.add(*buttons)
    bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', reply_markup=markup)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def add_homework(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø—É—Ç–µ–º datetime
    now_day, now_month = datetime.datetime.now().day, datetime.datetime.now().month
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    year, lst = datetime.datetime.now().year, []
    another_date = 0
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    for i in range(7):
        if now_day + i > calendar.monthrange(year, now_month)[1]:
            another_date += 1
            date = f'{another_date}.0{now_month + 1}'
        else:
            add_date = now_day + i
            if add_date < 10:
                add_date = f'0{add_date}'
            if now_month < 10:
                date = f'{add_date}.0{now_month}'
            else:
                date = f'{add_date}.{now_month}'
        lst.append(date)
    markup.add(*lst)
    markup.add('üî¥–ù–∞–∑–∞–¥')
    sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:', reply_markup=markup)
    bot.register_next_step_handler(sent, search_homeworks)


def create_homework(message):
    global ACTIVE_CLASS
    global ACTIVE_DAY
    homeworks = message.text
    try:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        creating_key = True
        # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
        key = ''
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞
        while creating_key:
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–ª—é—á
            key = ''.join(random.choice(string.digits) for _ in range(6))
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞ ( –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ )
            if key[0] != '0':
                creating_key = False
        sqlighter.create_new_homework(key, ACTIVE_DAY, homeworks)
        bot.send_message(message.chat.id, f'–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ {ACTIVE_DAY} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        homework(message)
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö / –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    except Exception as e:
        bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞! –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')


# –ø–æ–∏—Å–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def search_homework(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø—É—Ç–µ–º datetime
    now_day, now_month = datetime.datetime.now().day, datetime.datetime.now().month
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    year, lst = datetime.datetime.now().year, []
    another_date = 0
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    for i in range(7):
        if now_day + i > calendar.monthrange(year, now_month)[1]:
            another_date += 1
            date = f'{another_date}.0{now_month + 1}'
        else:
            add_date = now_day + i
            if add_date < 10:
                add_date = f'0{add_date}'
            if now_month < 10:
                date = f'{add_date}.0{now_month}'
            else:
                date = f'{add_date}.{now_month}'
        lst.append(date)
    markup.add(*lst)
    markup.add('üî¥–ù–∞–∑–∞–¥')
    sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:', reply_markup=markup)
    bot.register_next_step_handler(sent, send_homework)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_homework(message):
    try:
        date = message.text
        if date == 'üî¥–ù–∞–∑–∞–¥':
            return homework(message)
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        sqlighter = SQLighter(message.from_user.id)
        homewor = sqlighter.search_homework_on_date(date)
        homework_to_send = f'–î–ó –Ω–∞ {date}:'
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        if not homewor:
            raise Exception
        if len(homewor) == 1:
            homework_to_send = homework_to_send + '\n' + str(homewor[0][0])
        else:
            # –≤—ã–≤–æ–¥ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            for hm in homewor:
                st = homework_to_send
                homework_to_send = st + '\n' + str(hm[0]) + '.'
        bot.send_message(message.chat.id, homework_to_send)
        return search_homework(message)
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ—Ç –î–ó –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å')


# –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def search_homeworks(message):
    global ACTIVE_DAY
    if message.text == 'üî¥–ù–∞–∑–∞–¥':
        return homework(message)
    else:
        # –ø–æ–º–µ—â—è–µ–º –¥–∞—Ç—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        ACTIVE_DAY = message.text
    sent = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(sent, create_homework)


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print('Bot is working...')
    while True:
        try:
            bot.infinity_polling()
        except Exception as e:
            print(e)
            print(e.__class__.__name__)
            bot.infinity_polling()
